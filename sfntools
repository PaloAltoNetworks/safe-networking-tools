#!/usr/bin/env python
import time
import click
import random

from datetime import datetime, timedelta

from lib.utils import *
#from DNS.dns import *

@click.group()
def cli():
    pass

@click.command()
@click.option('--config', help='Settings file <~./panrc>', default='~/.panrc')
@click.option('--host', help='Host to send generated log messages to <localhost>', default='localhost')
@click.option('--port', help='Host port to connect <5514>', default=5514)
@click.option('--days_past', help='Number of days in past to generate events <0>', default=0)
@click.option('--days_future', help='Number of days in the future to generate events <0>', default=0)
@click.option('--date_start', help='Start date <"2019/01/01 00:00:00"> remember quotes', default="2019/01/01 00:00:00")
@click.option('--date_end', help='End date <"2019/12/31 23:59:59"> remember quotes', default="2019/12/31 23:59:59")
@click.option('--tne',  help='Total number of events to generate <1 million>', default=1000000)
@click.option('--pack', help='Content pack name <AppThreat-scriptGen>', default='AppThreat-scriptGen')
@click.option('--edl', is_flag=True, help='Send EDL THREAT logs rather than content THREAT logs')
@click.option('--cloud', is_flag=True, help='Send DNS-CLOUD THREAT logs rather than content THREAT logs')
def dns(config,host,port,tne,days_past,days_future,pack,date_start, date_end,edl,cloud):
    """Generate fake DNS threat traffic.\n
    Option defaults are in brackets <...>
    """

    
    if config:
        click.echo(f"Config file is {config}")
    
    click.echo("In DNS")  
    click.echo(f"Host is {host}")
    click.echo(f"Port is {port}")

    count = 0
    start = time.time()

    # Do this until we reach the max number of events to send
    while count < tne:
        # Generate a random number of events to send and sleep between each send
        numEvents = random.randint(1,25)
        sleepTime = random.randint(1,3)
        for event in range(numEvents):
            
            # If user specifies days_past and days_future
            if days_past != 0 and days_future != 0:
                startDate = calcDate("past",days_past)
                endDate = calcDate("future",days_future)
                # Generate a random date that is in the date range we want
                genDate = randomDate(startDate,endDate,random.random())
            # Otherwise we will generate based on start and end dates
            else:
                genDate = randomDate(date_start,date_end,random.random())
            
            # Generate the srcIP based on the month number.  This will allow for
            # the events to be corr3lated to a customer (in customer-db) via 
            # logstash. 
            # In the case of DNS, we need the source IP, the IMSI and the IMEI
            # for the customer as well. So parse those out
            # First get the right customer file to use
            tempDate = datetime.strptime(genDate, "%Y/%m/%d %H:%M:%S")
            csvFile = f"data/CUSTOMER/customerWireless{tempDate.month:02d}.csv"
            srcLine = randomLine(open(csvFile)).rstrip("\n").split(",")
            srcIP = srcLine[-1]
            IMSI = srcLine[-2]
            IMEI = srcLine[-3]

            # For DNS, the destination is the DNS server
            dstIP = randomLine(open("data/DNS/dnsServers.txt"))
            dstIP = dstIP.strip()
            
            # Randomly get a malicious domain to be associated with the event
            badDomain = randomLine(open("data/DNS/badDomainsList.txt"))
            badDomain = badDomain.strip()
            print(f"{badDomain}")
            severity = "medium"
            if edl:
                msg = f'1,{genDate},7051000040110,THREAT,spyware,2049,{genDate},{srcIP},{dstIP},192.168.211.101,{dstIP},SFN-EDL-Logging,,,dns,vsys1,Trusted_L3,Untrusted_L3,ethernet1/2,ethernet1/1,SFN-Log-Forwarding,{genDate},189425,1,61239,53,59734,53,0x80402000,udp,sinkhole,Suspicious DNS Query ({badDomain}),Suspicious Domain(12000000),any,medium,client-to-server,227962,0x2000000000000000,192.168.0.0-192.168.255.255,United States,0,,1.20422530882418E+018,,,0,,,,,,,,0,0,0,0,0,,VM-100,,,,,{IMSI},{IMEI},0,,N/A,unknown,AppThreat-0-0,0x0,0,4294967295'
            elif cloud:
                randNum = random.randint(1,101)
                print(f"randNum is {randNum}")
                if randNum%5==0:
                    sigNum = "109000001"
                elif randNum%3==0:
                    sigNum = "109001001"
                else:
                    sigNum = "999999999"


                msg = f'1,{genDate},13201000717,THREAT,spyware,2304,{genDate},{srcIP},{dstIP},192.168.5.4,{dstIP},SFN-Logging,,,dns,vsys1,TAP_DNS,TAP_DNS,ethernet1/5,ethernet1/5,SFN-Log-Forwarding,{genDate},2310095,1,53289,53,0,0,0x3000,udp,sinkhole,Suspicious DNS Query ({badDomain}),{sigNum}(99999999),any,medium,client-to-server,6.62809E+18,0x2000000000000000,192.168.0.0-192.168.255.255,United States,0,,0,,,0,,,,,,,,0,0,0,0,0,,FW-{sleepTime},,,,,{IMSI},{IMEI},0,,N/A,dns-cloud,AppThreat-0-0,0x0,0,4294967295,,,25ee5b89-ad1d-47c7-b5a4-b7461d07494e,0'
            else:
                msg = f'1,{genDate},015351000011583,THREAT,dns,2049,{genDate},{srcIP},{dstIP},192.168.55.20,{dstIP},SFN-Logging,,,dns,vsys1,trust,untrust,ethernet1/2,ethernet1/1,SFN-Log-Fowarding,{genDate},18680,1,54848,53,7771,53,0x402000,udp,sinkhole,"",Suspicious DNS Query (scriptGen:{badDomain})(99999999),any,medium,client-to-server,50115,0x2000000000000000,192.168.0.0-192.168.255.255,United States,0,,0,,,0,,,,,,,,0,12,0,0,0,,FW-{sleepTime},,,,,{IMSI},{IMEI},0,,N/A,dns,{pack},0x0,0,4294967295'


            # We now have the log message built - send it.
            print(f"{msg}")
            sendLog(f"{host}",port,msg)
            

        count += numEvents

        # Keep the following to use for troubleshooting performance issues later    
        # print(f"Started at {start}")
        # print(f"Ended at {time.time()}")
        # print(f"Time to send {count} events: {str(time.time() - start)} seconds")


@click.command()
@click.option('--config', help='Settings file <~./panrc>', default='~/.panrc')
@click.option('--host', help='Host to send generated log messages to <localhost>', default='localhost')
@click.option('--port', help='Host port to connect <5510>', default=5510)
@click.option('--days_past', help='Number of days in past to generate events <0>', default=0)
@click.option('--days_future', help='Number of days in the future to generate events <0>', default=0)
@click.option('--date_start', help='Start date <"2019/01/01 00:00:00"> remember quotes', default="2019-01-01T00:00:00")
@click.option('--date_end', help='End date <"2019/12/31 23:59:59"> remember quotes', default="2019-12-31T23:59:59")
@click.option('--tne',  help='Total number of events to generate <1 million>', default=1000000)
@click.option('--edl', is_flag=True, help='Send EDL THREAT logs rather than content THREAT logs')
def iot(config,host,port,tne,days_past,days_future,date_start, date_end,edl):
    '''
    Generate "fake" IoT traffic.  This will pull known bad IoT IPs (or domains)
    and use those as the destinations.  This emulates what an edge router (Junos)
    would send to logstash for SFN to parse and classify. 
    '''
    click.echo("In IoT")

     # If user specifies days_past and days_future
    if days_past != 0 and days_future != 0:
        startDate = calcDate("past",days_past)
        endDate = calcDate("future",days_future)
        # Generate a random date that is in the date range we want
        genDate = randomDate(startDate,endDate,random.random(),'%Y/%m/%d %H:%M:%S')
    # Otherwise we will generate based on start and end dates
    else:
        genDate = randomDate(date_start,date_end,random.random(),'%Y/%m/%d %H:%M:%S')

    # Generate the srcIP based on the month number.  This will allow for the events to 
    # be corrlated to a customer (in customer-db) via logstash. 
    # In the case of IoT, we only need the source IP, we don't need other items. 
    tempDate = datetime.strptime(genDate, "%Y/%m/%d %H:%M:%S")
    csvFile = f"data/CUSTOMER/customerWireless{tempDate.month:02d}.csv"
    srcLine = randomLine(open(csvFile)).rstrip("\n").split(",")
    srcIP = srcLine[-1]
    dstLine = randomLine(open("data/IOT/iot-bad-ipaddr.txt"))
    dstIP,malware = dstLine.split(',')
    dstIP = dstIP.strip()

    #print(f"{genDate}")
    msg = f"<158>1 {genDate}.000-07:00 DC-1-Border-vMX - - - - fpc0 PFE_FW_SYSLOG_ETH_IP: FW: ge-0/0/1.0   A 0800 00:0c:29:82:eb:ff -> 00:00:5e:00:01:01 icmp {srcIP} {dstIP}     8     0 (1 packets)"
    print(f"{msg}")
    sendLog(f"{host}",port,msg)


@click.command()
def url():
    '''
    NOT USED
    '''
    click.echo("In URL")

@click.command()
@click.option('--config', help='Settings file - <~./panrc>', default='~/.panrc')
@click.option('--host', help='Host to send generated log messages to - <localhost>', default='localhost')
@click.option('--port', help='Host port to connect - <5514>', default=5514)
@click.option('--log', help='Log to replay into SFN - <data/DNS/dns_log.csv>', default='data/DNS/dns_log.csv')
@click.option('--sec', help='Number of seconds to sleep between sending loglines - <1>',default=1)
def replay(config,log,host,port,sec):
    """Replay log from NGFW to log receiver.\n 
    Option defaults are in brackets <...>
    """
    if config:
        click.echo(f"Config file is {config}")

    try:
        with open(log) as f:
            for line in f:
                sendLog(host,port,line.rstrip())
                #time.sleep(sec)
    except EnvironmentError as e:
        print(f'Received error when trying to open logfile {log}:{nl}{e}{nl}')



cli.add_command(dns)
cli.add_command(iot)
cli.add_command(url)
cli.add_command(replay)
nl='\n'


if __name__=='__main__':
    cli()
